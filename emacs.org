#+TITLE: My Emacs Config
#+AUTHOR: Michal Lho≈•an
#+PROPERTY: header-args :tangle ./out/emacs

This config will hopefully grow a lot in the future. I really want to get
more into Emacs, the best way to do that is to create my own config!

* Absolute necessities, packages
  Here we require the package dependency, add melpa and refresh packages
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("org" . "https://orgmode.org/elpa/")
			("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
    (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

Use the no-littering package to prevent Emacs from littering.

#+begin_src emacs-lisp
(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

;; package for hiding non-useful modes
(use-package diminish)
#+end_src

* UI Configuration
Make Emacs more modern and minimalistic.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)

(menu-bar-mode -1)

(column-number-mode)
(global-display-line-numbers-mode t)

;; disable lines for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
		shell-mode-hook
		treemacs-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina")
#+end_src

* Global Keybinds

Set up global keybinds for things like invoking helm and such

#+begin_src emacs-lisp
;; set esc to quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(defun add-to-map(keys func)
  "Add a keybinding in evil mode from keys to func."
  (define-key evil-normal-state-map (kbd keys) func)
  (define-key evil-motion-state-map (kbd keys) func))

(add-to-map "<SPC>" nil)
(add-to-map "<SPC> <SPC>" 'counsel-M-x)

(add-to-map "<SPC> b s" 'counsel-switch-buffer)
#+end_src

* Which key
which-key is really useful for discovering new features of the editor.
#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5) 
  (which-key-mode))

(which-key-add-keymap-based-replacements evil-normal-state-map
  "<SPC> <SPC>" '("find-command") 
  "<SPC> b" '("buffer-actions")
  "<SPC> b s" '("buffer-switcher"))  
#+end_src

* Ivy
Ivy is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")

(use-package ivy-rich
  :diminish
  :config
  (ivy-rich-mode 1))

(use-package counsel
  :diminish
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))
#+end_src
* EXWM
  Won't be needing this for a while, should probably just disable it
#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path "/home/lhotan/repos/xelb/")
(add-to-list 'load-path "/home/lhotan/repos/exwm/")


(require 'exwm)
(require 'exwm-config)
(require 'exwm-systemtray)

(exwm-systemtray-enable)

(exwm-config-example)
#+end_src

